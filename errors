#ifndef __ERRORS__H
#define __ERRORS__H

#include <string>
#include <iostream>

namespace errors {
    class error {
public:
        error(std::string error_string)
            : _e_string(error_string), _is_nil(false)
        { }

        inline std::string what(){ return _e_string; }

        bool operator == (const error &e){
            return e._e_string == _e_string && e._is_nil == _is_nil;
        }

        bool operator != (const error &e){
            return !(*this == e);
        }

private:
        std::string _e_string;
        bool _is_nil;
        friend error nil();
    };

    inline error new_error(std::string error_string)
    {
        return error(error_string);
    }

    error nil()
    {
        error e("");
        e._is_nil = true;
        return e;
    }

    void panic(error e)
    {
        if (e != nil()) {
            std::cerr << e.what() << std::endl;
            std::abort();
        }
    }
}

#endif /* ifndef __ERRORS__H */
/* vim: set filetype=cpp: */
